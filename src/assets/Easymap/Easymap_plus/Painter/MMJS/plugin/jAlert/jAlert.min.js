/*
 *
 *
 jAlert version 4.035
 Made with love by Versatility Werks (http://flwebsites.biz)
 MIT Licensed
 *
 *
 */
!function (a) { Date.now || (Date.now = function () { return +new Date }), a.fn.jAlert = function (b) { a("body").focus(), a("body").blur(); var c = ["default", "green", "dark_green", "red", "dark_red", "black", "brown", "gray", "dark_gray", "blue", "dark_blue", "yellow"], d = ["xsm", "sm", "md", "lg", "xlg", "full", "auto"], e = { xsmall: "xsm", small: "sm", medium: "md", large: "lg", xlarge: "xlg" }, f = ["white", "black"], g = [], h = ["ja_animated"], i = []; if (this.length > 1) return this.each(function () { a.fn.jAlert(b) }), this; if ("undefined" != typeof a(this)[0] && "undefined" != a(this)[0].jAlert) return a(this)[0].jAlert; if (a.each(a.fn.jAlert.defaults, function (a, c) { var d = a.toLowerCase(); "undefined" != typeof b[d] && (b[a] = b[d]) }), b = a.extend({}, a.fn.jAlert.defaults, b), b.id) var k = b.id; else var j = Date.now().toString() + Math.floor(1e5 * Math.random()), k = "ja_" + j; var l = { set: function (a, b) { return l[a] = b, l }, __set: function (a, b) { return l.set(a, b) }, get: function (a) { return l[a] }, __get: function (a) { return l.get(a) }, centerAlert: function () { var b = a(window).height(), c = l.instance.height(), d = b - c, e = d / 2; return e = e > 200 ? e - 100 : e, e = e <= 0 ? 0 : e, e -= 1, l.instance.css("margin-top", e + "px"), l.instance.css("margin-bottom", "0px"), a("body").css("overflow", "hidden"), d > 5 ? l.instance.parents(".ja_wrap").css("position", "fixed") : (l.instance.parents(".ja_wrap").css("position", "absolute"), a("html, body").animate({ scrollTop: top - 50 }, 200)), l }, animateAlert: function (b) { return "hide" == b ? (l.instance.jAlert().blurBackground && a("body").removeClass("ja_blur"), l.instance.removeClass(l.showAnimation).addClass(l.hideAnimation)) : (l.instance.jAlert().blurBackground && a("body").addClass("ja_blur"), l.centerAlert(), l.instance.addClass(l.showAnimation).removeClass(l.hideAnimation).show()), l }, closeAlert: function (b, c) { return 0 != b && (b = !0), l.instance && (l.instance.unbind("DOMSubtreeModified"), l.animateAlert("hide"), window.setTimeout(function () { var d = l.instance.parents(".ja_wrap"); b ? d.remove() : d.hide(), "function" == typeof c ? c(l.instance) : "function" == typeof l.onClose && l.onClose(l.instance), a(".jAlert:visible").length > 0 ? a(".jAlert:visible:last").jAlert().centerAlert() : a("body").css("overflow", "auto") }, l.animationTimeout)), l }, showAlert: function (b, c, d, e) { 0 != b && (b = !0), c !== !1 && (c = !0), b && a(".jAlert:visible").jAlert().closeAlert(c); var f = l.instance.parents(".ja_wrap"); return a("body").append(f), l.animateAlert("show"), "function" == typeof e && (l.onClose = e), window.setTimeout(function () { "function" == typeof d && d(l.instance) }, l.animationTimeout), l } }; if (a.each(b, function (a, b) { l.set(a, b) }), l.set("id", k), l.content && 0 === l.content.indexOf("#") && a(l.content).length > 0 && (l.content = a(l.content).html()), l.video && l.video.indexOf("youtube.com/watch?v=") > -1 && l.video.indexOf("embed") === -1 && (l.video = l.video.replace("watch?v=", "embed/")), "confirm" == l.type && (l.content || (l.content = l.confirmQuestion), l.btns = [{ text: l.confirmBtnText, theme: "green", class: "confirmBtn", closeAlert: !0, onClick: l.onConfirm }, { text: l.denyBtnText, theme: "red", class: "denyBtn", closeAlert: !0, onClick: l.onDeny }], l.autofocus = l.confirmAutofocus), l.color && (l.theme = l.color), a.inArray(l.theme, c) == -1) return console.log("jAlert Config Error: Invalid theme selection."), !1; if (h.push("ja_" + l.theme), l.class && h.push(l.class), l.classes && h.push(l.classes), l.noPadContent && h.push("ja_no_pad"), l.title || h.push("ja_noTitle"), l.width && (l.size = l.width), l.size && "object" == typeof l.size && ("undefined" == typeof l.size.width || "undefined" == typeof l.size.height)) return console.log("jAlert Config Error: Invalid size selection (try a preset or make sure you're including height and width in your size object)."), !1; if (l.size ? "object" == typeof l.size ? (g.push("width: " + l.size.width + ";"), g.push("height: " + l.size.height + ";"), h.push("ja_setheight")) : ("undefined" != typeof e[l.size] && (l.size = e[l.size]), a.inArray(l.size, d) > -1 ? h.push("ja_" + l.size) : g.push("width: " + l.size + ";")) : h.push("ja_sm"), a.inArray(l.backgroundColor, f) == -1) return console.log("jAlert Config Error: Invalid background color selection."), !1; i.push("ja_wrap_" + l.backgroundColor), l.onOpen = [l.onOpen]; var m = "onload='$.fn.jAlert.mediaLoaded($(this))'", n = "<div class='ja_loader'>Loading...</div>"; l.picture && (l.image = l.picture), l.image ? (l.content = "<div class='ja_media_wrap'>" + n + "<img src='" + l.image + "' class='ja_img' " + m + "'", l.imageWidth && (l.content += " style='width: " + l.imageWidth + "'"), l.content += "></div>") : l.video ? (l.content = "<div class='ja_media_wrap'>" + n + "<div class='ja_video'></div></div>", l.onOpen.unshift(function (b) { var c = document.createElement("iframe"); c.src = b.jAlert().video, c.addEventListener ? c.addEventListener("load", function () { a.fn.jAlert.mediaLoaded(a(this)) }, !0) : c.attachEvent ? c.attachEvent("onload", function () { a.fn.jAlert.mediaLoaded(a(this)) }) : c.onload = function () { a.fn.jAlert.mediaLoaded(a(this)) }, b.find(".ja_video").append(c) })) : l.iframe ? (l.iframeHeight || (l.iframeHeight = .9 * a(window).height() + "px"), l.content = "<div class='ja_media_wrap'>" + n + "</div>", l.onOpen.unshift(function (b) { var c = document.createElement("iframe"); c.src = b.jAlert().iframe, c.className = "ja_iframe", c.addEventListener ? c.addEventListener("load", function () { a.fn.jAlert.mediaLoaded(a(this)) }, !0) : c.attachEvent ? c.attachEvent("onload", function () { a.fn.jAlert.mediaLoaded(a(this)) }) : c.onload = function () { a.fn.jAlert.mediaLoaded(a(this)) }, b.find(".ja_media_wrap").append(c) })) : l.ajax && (l.content = "<div class='ja_media_wrap'>" + n + "</div>", onAjaxCallbacks = l.onOpen, l.onOpen = [function (b) { a.ajax(b.jAlert().ajax, { async: !0, complete: function (c, d) { b.find(".ja_media_wrap").replaceWith(c.responseText), a.each(onAjaxCallbacks, function (a, c) { c(b) }) }, error: function (a, c, d) { l.onAjaxFail(b, "Error getting content: Code: " + a.status + " : Msg: " + a.statusText) } }) }]); var o = function (b) { if ("undefined" == typeof b.href && (b.href = ""), "undefined" == typeof b.class && (b.class = ""), "undefined" == typeof b.theme ? b.class += " ja_btn_default" : b.class += " ja_btn_" + b.theme, "undefined" == typeof b.text && (b.text = ""), "undefined" == typeof b.id) { var c = Date.now().toString() + Math.floor(1e5 * Math.random()); b.id = "ja_btn_" + c } return "undefined" == typeof b.target && (b.target = "_self"), "undefined" == typeof b.closeAlert && (b.closeAlert = !0), a("body").on("click", "#" + b.id, function (c) { var d = a(this); b.closeAlert && d.parents(".jAlert").jAlert().closeAlert(); var e = !0; return "function" == typeof b.onClick && (e = b.onClick(c, d)), !e || b.closeAlert ? (c.preventDefault(), !1) : e }), "<a href='" + b.href + "' id='" + b.id + "' target='" + b.target + "' class='ja_btn " + b.class + "'>" + b.text + "</a> " }, p = function (b) { var c = ""; c += '<div class="ja_wrap ' + i.join(" ") + '"><div class="jAlert ' + h.join(" ") + '" style="' + g.join(" ") + '" id="' + l.id + '"><div>', l.closeBtn && (c += "<div class='closejAlert ja_close", l.closeBtnAlt ? c += " ja_close_alt" : l.closeBtnRound && (c += " ja_close_round"), c += "'>&times;</div>"), l.title && (c += "<div class='ja_title'><div>" + l.title + "</div></div>"), c += '<div class="ja_body">' + b, l.btns && (c += '<div class="ja_btn_wrap ', l.btnBackground && (c += "optBack"), c += '">'), "object" == typeof l.btns[0] ? a.each(l.btns, function (a, b) { "object" == typeof b && (c += o(b)) }) : "object" == typeof l.btns ? c += o(l.btns) : l.btns && console.log("jAlert Config Error: Incorrect value for btns (must be object or array of objects): " + l.btns), l.btns && (c += "</div>"), c += "</div></div></div></div>"; var d = a(c); if (l.replaceOtherAlerts) { var e = a(".jAlert:visible"); e.each(function () { a(this).jAlert().closeAlert() }) } return a("body").append(d), l.instance = a("#" + l.id), l.instance[0].jAlert = l, a("body").css("overflow", "hidden"), l.animateAlert("show"), l.closeBtn && l.instance.on("click", ".closejAlert", function (b) { return b.preventDefault(), a(this).parents(".jAlert:first").jAlert().closeAlert(), !1 }), l.closeOnClick && (a(document).off("mouseup touchstart", a.fn.jAlert.onMouseUp), a(document).on("mouseup touchstart", a.fn.jAlert.onMouseUp)), l.closeOnEsc && (a(document).off("keydown", a.fn.jAlert.onEscKeyDown), a(document).on("keydown", a.fn.jAlert.onEscKeyDown)), l.onOpen && a.each(l.onOpen, function (a, b) { b(l.instance) }), l.autofocus ? l.instance.find(l.autofocus).focus() : l.instance.focus(), l.instance.bind("DOMSubtreeModified", function () { l.centerAlert() }), l.instance }; return this.initialize = function () { return l.content || l.image || l.video || l.iframe || l.ajax ? (l.content || (l.content = ""), p(l.content)) : (console.log("jAlert potential error: No content defined"), p("")) }, this.initialize(), l }, a.fn.jAlert.defaults = { title: !1, content: !1, noPadContent: !1, image: !1, imageWidth: "auto", video: !1, ajax: !1, onAjaxFail: function (a, b) { a.jAlert().closeAlert(), errorAlert(b) }, iframe: !1, iframeHeight: !1, class: "", classes: "", id: !1, showAnimation: "MMfadeInUp", hideAnimation: "MMfadeOutDown", animationTimeout: 600, theme: "default", backgroundColor: "black", blurBackground: !1, size: !1, replaceOtherAlerts: !1, closeOnClick: !1, closeOnEsc: !0, closeBtn: !0, closeBtnAlt: !1, closeBtnRound: !0, btns: !1, btnBackground: !0, autofocus: !1, onOpen: function (a) { return !1 }, onClose: function (a) { return !1 }, type: "modal", confirmQuestion: "是否確定?", confirmBtnText: "是", denyBtnText: "否", confirmAutofocus: ".confirmBtn", onConfirm: function (a, b) { return a.preventDefault(), console.log("confirmed"), !1 }, onDeny: function (a, b) { return a.preventDefault(), !1 } }, a.fn.jAlert.onMouseUp = function (b) { var c = b.target ? b.target : b.srcElement, d = a(".jAlert:visible:last"); d.length > 0 && d.jAlert().closeOnClick && (a(c).is(".jAlert *") || d.jAlert().closeAlert()) }, a.fn.jAlert.onEscKeyDown = function (b) { if (27 === b.keyCode) { var c = a(".jAlert:visible:last"); c.length > 0 && c.jAlert().closeOnEsc && c.jAlert().closeAlert() } }, a.fn.attachjAlert = function (b) { return b.preventDefault(), a.jAlert(a(this).data()), !1 }, a.jAlert = function (b) { if ("current" == b) { var c = a(".jAlert:visible:last"); return c.length > 0 && c.jAlert() } return "attach" == b ? (a("[data-jAlert]").off("click", a.fn.attachjAlert), a("[data-jAlert]").on("click", a.fn.attachjAlert), a("[data-jalert]").off("click", a.fn.attachjAlert), a("[data-jalert]").on("click", a.fn.attachjAlert), !1) : a.fn.jAlert(b) }, a.fn.alertOnClick = function (b) { a(this).on("click", function (c) { return c.preventDefault(), a.jAlert(b), !1 }) }, a.alertOnClick = function (b, c) { a("body").on("click", b, function (b) { return b.preventDefault(), a.jAlert(c), !1 }) }, a.fn.closeAlert = function (b, c) { a(this).jAlert().closeAlert(b, c) }; var b; a(window).resize(function () { window.clearTimeout(b), b = window.setTimeout(function () { a(".jAlert:visible").each(function () { a(this).jAlert().centerAlert() }) }, 200) }), a.fn.jAlert.mediaLoaded = function (a) { var b = a.parents(".ja_media_wrap"), c = b.find(".ja_video"), d = a.parents(".jAlert:first"), e = d.jAlert(); b.find(".ja_loader").remove(), c.length > 0 ? c.fadeIn("fast") : a.fadeIn("fast"), "undefined" != typeof e.iframeHeight && e.iframeHeight && (a.css("display", "block"), a.height(e.iframeHeight)), e.centerAlert() } }(jQuery);