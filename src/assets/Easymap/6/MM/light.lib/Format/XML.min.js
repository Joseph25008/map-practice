OpenLayers.Format.XML = OpenLayers.Class(OpenLayers.Format, { namespaces: null, namespaceAlias: null, defaultPrefix: null, readers: {}, writers: {}, xmldom: null, initialize: function (e) { window.ActiveXObject && (this.xmldom = new ActiveXObject("Microsoft.XMLDOM")), OpenLayers.Format.prototype.initialize.apply(this, [e]), this.namespaces = OpenLayers.Util.extend({}, this.namespaces), this.namespaceAlias = {}; for (var t in this.namespaces) this.namespaceAlias[this.namespaces[t]] = t }, destroy: function () { this.xmldom = null, OpenLayers.Format.prototype.destroy.apply(this, arguments) }, setNamespace: function (e, t) { this.namespaces[e] = t, this.namespaceAlias[t] = e }, read: function (e) { var t = e.indexOf("<"); t > 0 && (e = e.substring(t)); var n = OpenLayers.Util.Try(OpenLayers.Function.bind(function () { var t; return (t = window.ActiveXObject && !this.xmldom ? new ActiveXObject("Microsoft.XMLDOM") : this.xmldom).loadXML(e), t }, this), function () { return (new DOMParser).parseFromString(e, "text/xml") }, function () { var t = new XMLHttpRequest; return t.open("GET", "data:text/xml;charset=utf-8," + encodeURIComponent(e), !1), t.overrideMimeType && t.overrideMimeType("text/xml"), t.send(null), t.responseXML }); return this.keepData && (this.data = n), n }, write: function (e) { var t; if (this.xmldom) t = e.xml; else { var n = new XMLSerializer; if (1 == e.nodeType) { var a = document.implementation.createDocument("", "", null); a.importNode && (e = a.importNode(e, !0)), a.appendChild(e), t = n.serializeToString(a) } else t = n.serializeToString(e) } return t }, createElementNS: function (e, t) { return this.xmldom ? "string" == typeof e ? this.xmldom.createNode(1, t, e) : this.xmldom.createNode(1, t, "") : document.createElementNS(e, t) }, createDocumentFragment: function () { return this.xmldom ? this.xmldom.createDocumentFragment() : document.createDocumentFragment() }, createTextNode: function (e) { return "string" != typeof e && (e = String(e)), this.xmldom ? this.xmldom.createTextNode(e) : document.createTextNode(e) }, getElementsByTagNameNS: function (e, t, n) { var a = []; if (e.getElementsByTagNameNS) (a = e.getElementsByTagNameNS(t, n)).length <= 0 && (a = e.getElementsByTagNameNS("", n)); else for (var r, i, s = e.getElementsByTagName("*"), o = 0, l = s.length; o < l; ++o) i = (r = s[o]).prefix ? r.prefix + ":" + n : n, "*" != n && i != r.nodeName || "*" != t && t != r.namespaceURI || a.push(r); return a }, getAttributeNodeNS: function (e, t, n) { var a = null; if (e.getAttributeNodeNS) a = e.getAttributeNodeNS(t, n); else for (var r, i = e.attributes, s = 0, o = i.length; s < o; ++s) if ((r = i[s]).namespaceURI == t && (r.prefix ? r.prefix + ":" + n : n) == r.nodeName) { a = r; break } return a }, getAttributeNS: function (e, t, n) { var a = ""; if (e.getAttributeNS) a = e.getAttributeNS(t, n) || ""; else { var r = this.getAttributeNodeNS(e, t, n); r && (a = r.nodeValue) } return a }, getChildValue: function (e, t) { var n = t || ""; if (e) for (var a = e.firstChild; a; a = a.nextSibling) switch (a.nodeType) { case 3: case 4: n += a.nodeValue } return n }, isSimpleContent: function (e) { for (var t = !0, n = e.firstChild; n; n = n.nextSibling) if (1 === n.nodeType) { t = !1; break } return t }, contentType: function (e) { for (var t = !1, n = !1, a = OpenLayers.Format.XML.CONTENT_TYPE.EMPTY, r = e.firstChild; r; r = r.nextSibling) { switch (r.nodeType) { case 1: n = !0; break; case 8: break; default: t = !0 } if (n && t) break } if (n && t) a = OpenLayers.Format.XML.CONTENT_TYPE.MIXED; else { if (n) return OpenLayers.Format.XML.CONTENT_TYPE.COMPLEX; if (t) return OpenLayers.Format.XML.CONTENT_TYPE.SIMPLE } return a }, hasAttributeNS: function (e, t, n) { return e.hasAttributeNS ? e.hasAttributeNS(t, n) : !!this.getAttributeNodeNS(e, t, n) }, setAttributeNS: function (e, t, n, a) { if (e.setAttributeNS) e.setAttributeNS(t, n, a); else { if (!this.xmldom) throw "setAttributeNS not implemented"; if (t) { var r = e.ownerDocument.createNode(2, n, t); r.nodeValue = a, e.setAttributeNode(r) } else e.setAttribute(n, a) } }, createElementNSPlus: function (e, t) { var n = (t = t || {}).uri || this.namespaces[t.prefix]; if (!n) { var a = e.indexOf(":"); n = this.namespaces[e.substring(0, a)] } n || (n = this.namespaces[this.defaultPrefix]); var r = this.createElementNS(n, e); t.attributes && this.setAttributes(r, t.attributes); var i = t.value; return null != i && r.appendChild(this.createTextNode(i)), r }, setAttributes: function (e, t) { var n, a; for (var r in t) null != t[r] && t[r].toString && (n = t[r].toString(), a = this.namespaces[r.substring(0, r.indexOf(":"))] || null, this.setAttributeNS(e, a, r, n)) }, readNode: function (e, t) { t || (t = {}); var n = this.readers[e.namespaceURI ? this.namespaceAlias[e.namespaceURI] : this.defaultPrefix]; if (n) { var a = n[e.localName || e.nodeName.split(":").pop()] || n["*"]; a && a.apply(this, [e, t]) } return t }, readChildNodes: function (e, t) { t || (t = {}); for (var n, a = e.childNodes, r = 0, i = a.length; r < i; ++r) 1 == (n = a[r]).nodeType && this.readNode(n, t); return t }, writeNode: function (e, t, n) { var a, r, i = e.indexOf(":"); i > 0 ? (a = e.substring(0, i), r = e.substring(i + 1)) : (a = n ? this.namespaceAlias[n.namespaceURI] : this.defaultPrefix, r = e); var s = this.writers[a][r].apply(this, [t]); return n && n.appendChild(s), s }, getChildEl: function (e, t, n) { return e && this.getThisOrNextEl(e.firstChild, t, n) }, getNextEl: function (e, t, n) { return e && this.getThisOrNextEl(e.nextSibling, t, n) }, getThisOrNextEl: function (e, t, n) { e: for (var a = e; a; a = a.nextSibling) switch (a.nodeType) { case 1: if (!(t && t !== (a.localName || a.nodeName.split(":").pop()) || n && n !== a.namespaceURI)) break e; a = null; break e; case 3: if (/^\s*$/.test(a.nodeValue)) break; case 4: case 6: case 12: case 10: case 11: a = null; break e } return a || null }, lookupNamespaceURI: function (e, t) { var n = null; if (e) if (e.lookupNamespaceURI) n = e.lookupNamespaceURI(t); else e: switch (e.nodeType) { case 1: if (null !== e.namespaceURI && e.prefix === t) { n = e.namespaceURI; break e } var a = e.attributes.length; if (a) for (var r, i = 0; i < a; ++i) { if ("xmlns" === (r = e.attributes[i]).prefix && r.name === "xmlns:" + t) { n = r.value || null; break e } if ("xmlns" === r.name && null === t) { n = r.value || null; break e } } n = this.lookupNamespaceURI(e.parentNode, t); break e; case 2: n = this.lookupNamespaceURI(e.ownerElement, t); break e; case 9: n = this.lookupNamespaceURI(e.documentElement, t); break e; case 6: case 12: case 10: case 11: break e; default: n = this.lookupNamespaceURI(e.parentNode, t) } return n }, getXMLDoc: function () { return OpenLayers.Format.XML.document || this.xmldom || (document.implementation && document.implementation.createDocument ? OpenLayers.Format.XML.document = document.implementation.createDocument("", "", null) : !this.xmldom && window.ActiveXObject && (this.xmldom = new ActiveXObject("Microsoft.XMLDOM"))), OpenLayers.Format.XML.document || this.xmldom }, CLASS_NAME: "OpenLayers.Format.XML" }), OpenLayers.Format.XML.CONTENT_TYPE = { EMPTY: 0, SIMPLE: 1, COMPLEX: 2, MIXED: 3 }, OpenLayers.Format.XML.lookupNamespaceURI = OpenLayers.Function.bind(OpenLayers.Format.XML.prototype.lookupNamespaceURI, OpenLayers.Format.XML.prototype), OpenLayers.Format.XML.document = null;