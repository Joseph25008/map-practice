OpenLayers.IMAGE_RELOAD_ATTEMPTS = 1, OpenLayers.Renderer.SVG.MAX_PIXEL = 3e4, function (e) { e.EasymapErr = "EasymapErr:", e.EasymapLog = "EasymapLog:", e.ol = OpenLayers.Class({ coordTrans: null, popup: null, resolutions: { resolutions: [156543.03390625, 78271.516953125, 39135.7584765625, 19567.87923828125, 9783.939619140625, 4891.9698095703125, 2445.9849047851562, 1222.9924523925781, 611.4962261962891, 305.74811309814453, 152.87405654907226, 76.43702827453613, 38.218514137268066, 19.109257068634033, 9.554628534317017, 4.777314267158508, 2.388657133579254, 1.194328566789627, .5971642833948135, .2985821416974068, .1492910708487034, .0746455354243517], serverResolutions: [156543.03390625, 78271.516953125, 39135.7584765625, 19567.87923828125, 9783.939619140625, 4891.9698095703125, 2445.9849047851562, 1222.9924523925781, 611.4962261962891, 305.74811309814453, 152.87405654907226, 76.43702827453613, 38.218514137268066, 19.109257068634033, 9.554628534317017, 4.777314267158508, 2.388657133579254, 1.194328566789627, .5971642833948135, .2985821416974068, .1492910708487034, .0746455354243517], transitionEffect: "resize" }, map: null, items: [], layers: [], gmarkers: [], dgcharts: [], easykml: null, navigation: null, panZoomBar: null, layerSwitcher: null, measure: null, statusbar: null, easymap: null, root: "", mname: "", coordinate: "WGS84", debug: !0, dcz: 10, errorPic: "", zmScaleBK: null, sStatus: !1, center: null, zoom: 5, zmWMap: [], zmSwitcher: [], lineStyle: null, polygonStyle: null, events: [], itemsn: 0, initialize: function (t, r) { this.mapDivId = t, r.coordinate && (this.coordinate = r.coordinate), r.debug && (this.debug = r.debug), r.layers.length, r.dcz && (this.dcz = r.dcz), r.errorPic && (this.errorPic = r.errorPic), r.zmScaleBK && (this.zmScaleBK = r.zmScaleBK), r.mname && (this.mname = r.mname), r.root && (this.root = r.root), r.center && (this.center = r.center), r.zoom && (this.zoom = r.zoom), r.zmWMap && (this.zmWMap = r.zmWMapBK), r.zmSwitcher && (this.zmSwitcher = r.zmSwitcher), r.lineStyle && (this.lineStyle = r.lineStyle), r.polygonStyle && (this.polygonStyle = r.polygonStyle), r.easymap && (this.easymap = r.easymap), r.sAuthor && (this.sAuthor = r.sAuthor), r.sStatus && (this.sStatus = r.sStatus), r.isEasymap5_mapini && (this.isEasymap5_mapini = r.isEasymap5_mapini), r.sStatus && (this.sStatus = r.sStatus), r.zmScaleLine && (this.zmScaleLine = r.zmScaleLine), r.sScaleBar && (this.sScaleBar = r.sScaleBar), this.debug = r.debug, OpenLayers.ImgPath = OpenLayers._getScriptLocation() + "../imgs/"; for (var a = window.location.href.split("/"), s = "", o = 0; o < a.length - 1; o++) s += a[o] + "/"; _OPENLAYERS_PLUGIN_ROOT = s + "Plugin/", this.coordTrans = new CoordTrans, this.map = null, this.map = new OpenLayers.Map({ div: this.mapDivId, projection: new OpenLayers.Projection("EPSG:900913"), displayProjection: new OpenLayers.Projection("EPSG:4326"), controls: [], theme: null, allOverlays: !0, numZoomLevels: r.numZoomLevels, resolutions: r.resolutions }), this.easykml = new e.EasyKML, this.easykml.setMap(this.map), this.navigation = new OpenLayers.Control.Navigation({ id: "_MAIN_NAVIGATION_" }); var n = new e.Control.createDiv; if (0 == e.Tools.isMobileDevice() && this.map.addControl(this.navigation), this.map.addControl(n), this.measure = new e.Control.MeasureToolbar(this), this.map.addControl(this.measure), this.measure.div.style.display = "none", this.sScaleBar) { var i = new e.Control.ScaleLine; this.map.addControl(i), i.div.style.width = "180px", i.showTopOutUnits = _$EZMAP.UNIT_KM, i.showTopInUnits = _$EZMAP.UNIT_M, i.shotBottomOutUnits = _$EZMAP.UNIT_MILE, i.showBottomInUnits = _$EZMAP.UNIT_FEET, this.zmScaleLine && (i.div.style.left = this.zmScaleLine[0] + "px", i.div.style.marginBottom = this.zmScaleLine[1] + "px", i.div.style.display = "block", i.div.style.bottom = "0") } var l = new e.Control.LayerSwitcher({}); if (l.setMap(this.map), l.setMM(this), l.setMName(this.mname), l.setRoot(this.root), l.setDcz(this.dcz), l.debug = this.debug, this.layerSwitcher = l, this.layerSwitcher.baseLayerId = this.mname, this.map.addControl(l), this.zmSwitcher && this.setMapTypeSelectorP(this.zmSwitcher), this.addItem(r.layers), this.mname && this.switchMap(this.mname), this.center.x && this.center.y && this.zoom) { this.coordTrans.from(this.center.x, this.center.y, this.coordinate); var h = this.coordTrans.toWGS84(); this.map.setCenter(new OpenLayers.LonLat(h.lon, h.lat).transform(new OpenLayers.Projection("EPSG:4326"), this.map.getProjectionObject()), this.zoom) } else this.debug && alert("未設定預設起使位置與zoom level"); if (this.sAuthor && ((n = this.createDiv("_EZMAP6_INNERUSED_IDSYS_LOGO_")).innerHTML = "<img src='" + _dgmap4path + "imgs/easymap_logo.png'>", n.style.zIndex = "99999", this.resizeTo()), this.sStatus) { var c = new e.Control.StatusBar; c.mm = this, this.map.addControl(c), this.statusbar = c } if (1 == e.Tools.isMobileDevice()) { var m = document.getElementById("mobile-arrow"); m && (m.style.display = "") } }, getBaseLayers: function () { for (var e = [], t = 0; t < this.layers.length; t++) this.layers[t].options.bg && e.push(this.layers[t]); return e }, setCoordinate: function (e) { switch (e) { case this.coordTrans.TM2_67: case this.coordTrans.TM2_97: case this.coordTrans.TWD67: case this.coordTrans.TWD97: case this.coordTrans.WGS84: this.coordinate = e; break; default: this.coordinate = "WGS84" } }, setKmlProxy: function (e) { this.easykml.proxy = e }, addMapControl: function (t) { if (this.map.getControlsByClass("MM.Control.PanZoomBar").length >= 1) return !1; var r = null == t ? this.zmScaleBK : t; return this.panZoomBar = new e.Control.PanZoomBar({ id: "_PANZOOMBAR_" }), this.panZoomBar.setZoomWorld(this.center, this.zoom), this.map.addControl(this.panZoomBar), this.panZoomBar.position.x = 0, this.panZoomBar.position.y = 0, this.panZoomBar.left = r[0] + "px", this.panZoomBar.top = r[1] + "px", this.setMapControl(r), e.Tools.isMobileDevice() && (this.panZoomBar.position.x = r[0], this.panZoomBar.position.y = r[1]), !0 }, setMapControl: function (e) { if (this.map.getControlsByClass("MM.Control.PanZoomBar").length <= 0) return !1; this.panZoomBar.div.style.left = parseInt(e[0]) + "px", this.panZoomBar.div.style.top = parseInt(e[1]) + "px" }, addMapTypeSelector: function (e, t) { this.layerSwitcher && (this.layerSwitcher.element.style.display = "", t && this.setMapTypeSelectorP(t)) }, setMapTypeSelectorP: function (t) { if (0 == e.Tools.isArray(t)) return !1; this.layerSwitcher && this.layerSwitcher.element && (this.layerSwitcher.element.style.right = parseInt(t[0]) + 80 + "px", this.layerSwitcher.element.style.top = parseInt(t[1]) - 10 + "px") }, getMapTypeSelectorV: function () { return "none" != this.layerSwitcher.element.style.display }, setMapTypeSelectorV: function (t) { switch (t.toString().toLowerCase()) { case "true": t = !0; break; case "false": t = !1 } return e.Tools.isBoolean(t) || (t = !0), this.layerSwitcher.element.style.display = t ? "" : "none", !0 }, addWMap: function () { if (this.map.getControlsByClass("MM.Control.LTOverviewMap").length >= 1) return !1; var t = null; if (null == (t = this.getLayerById(this.layerSwitcher.baseLayerId))) return !1; var r = { layers: [this.getDgSource(t)] }, a = new e.Control.LTOverviewMap(r); a.minRatio = this.dcz, a.maxRatio = this.dcz, this.map.addControl(a), this.zmWMapBK && (a.div.style.bottom = this.zmWMapBK[0] + "px", a.div.style.right = this.zmWMapBK[1] + "px") }, setWMapV: function (t) { if (this.map.getControlsByClass("MM.Control.LTOverviewMap").length <= 0) return !1; switch (t.toString().toLowerCase()) { case "true": t = !0; break; case "false": t = !1 } e.Tools.isBoolean(t) || (t = !0); var r = this.map.getControlsByClass("MM.Control.LTOverviewMap")[0]; return r.div.style.display = t ? "" : "none", !0 }, getMapControlV: function () { return !(this.map.getControlsByClass("MM.Control.PanZoomBar").length <= 0) && "none" != this.map.getControlsByClass("MM.Control.PanZoomBar")[0].div.style.display }, setMapControlV: function (t) { if (this.map.getControlsByClass("MM.Control.PanZoomBar").length <= 0) return !1; switch (t.toString().toLowerCase()) { case "true": t = !0; break; case "false": t = !1 } e.Tools.isBoolean(t) || (t = !0); var r = this.map.getControlsByClass("MM.Control.PanZoomBar")[0]; return r.div.style.display = t ? "" : "none", !0 }, setMapDraggable: function (t) { switch (t.toString().toLowerCase()) { case "true": t = !0; break; case "false": t = !1 } e.Tools.isBoolean(t) || (t = !0), this.navigation.autoActivate = !!t }, swheelZoom: function (t) { switch (t.toString().toLowerCase()) { case "true": t = !0; break; case "false": t = !1 } e.Tools.isBoolean(t) || (t = !0), t ? (this.navigation.enableZoomBox(), this.navigation.enableZoomWheel()) : (this.navigation.disableZoomBox(), this.navigation.disableZoomWheel()) }, addMeasure: function () { }, createDiv: function (e, t, r, a, s, o, n, i) { var l = OpenLayers.Util.createDiv(e, t, r, a, s, o, n, i); return "" == this.map.div.style.zIndex ? l.style.zIndex = 100 : l.style.zIndex = parseInt(this.map.div.style.zIndex.toString().toLowerCase().replace("px", "")) + 100, this.map.getControlsByClass("MM.Control.createDiv")[0].div.appendChild(l), l }, removeDiv: function (e) { this.map.getControlsByClass("MM.Control.createDiv")[0].div.removeChild(e) }, stopNavigation: function () { if (this.map.getControlsByClass("OpenLayers.Control.Navigation").length <= 0) return !1; for (var e = 0; e < this.map.getControlsByClass("OpenLayers.Control.Navigation").length; e++) this.map.getControlsByClass("OpenLayers.Control.Navigation")[e].deactivate() }, startNavigation: function () { if (this.map.getControlsByClass("OpenLayers.Control.Navigation").length <= 0) return !1; for (var e = 0; e < this.map.getControlsByClass("OpenLayers.Control.Navigation").length; e++) this.map.getControlsByClass("OpenLayers.Control.Navigation")[e].activate() }, resizeTo: function (e, t) { this.map.updateSize(); var r = this.map.getCurrentSize(); if (this.sAuthor) { var a = r.w, s = r.h; this.sScaleBar ? (a -= 90, s -= 64) : (a -= 90, s -= 42), (o = document.getElementById("_EZMAP6_INNERUSED_IDSYS_LOGO_")) && (o.style.left = a + "px", o.style.top = s + "px") } if (this.isEasymap5_mapini) { var a = r.w, s = r.h; a -= 160, s -= 72; var o = document.getElementById("_EZMAP6_INNERUSED_IDSYS_EZ5_SW_MAP_"); o && (o.style.marginLeft = a + "px", o.style.marginTop = "20px") } }, getWidth: function () { return this.map.size.w }, getHeight: function () { return this.map.size.h }, getCX: function () { return this.getCenter().lon }, getCY: function () { return this.getCenter().lat }, getCenter: function () { return null == this.map.center ? { lon: 0, lat: 0 } : this.toCoord(this.map.center.lon, this.map.center.lat) }, getRectBound: function () { var e = this.map.getExtent(), t = this.toCoord(e.left, e.top), r = this.toCoord(e.right, e.bottom); return [t.lon, t.lat, r.lon, r.lat] }, getZoom: function () { return this.map.zoom }, setZoom: function (e) { if (null == e) return !1; this.map.setCenter(new OpenLayers.LonLat(this.map.center.lon, this.map.center.lat), e) }, exPanTo: function (e) { if (null == e) return !1; var t = e.x, r = e.y; this.coordTrans.from(t, r, this.coordinate); var a = this.coordTrans.toWGS84(), s = this.fromWGS84(a.lon, a.lat), o = new OpenLayers.LonLat(s.lon, s.lat); this.map.panTo(o) }, zoomTo: function (e) { this.map.zoomTo(e) }, setCenter: function (e, t) { if (null == e) return !1; null == t && (t = this.getZoom()); var r = e.x, a = e.y; this.coordTrans.from(r, a, this.coordinate); var s = this.coordTrans.toWGS84(); r = s.lon, a = s.lat; var o = this.fromWGS84(s.lon, s.lat); this.map.setCenter(o, t) }, zoomIn: function () { this.map.zoomIn() }, zoomOut: function () { this.map.zoomOut() }, getRectPicBBOX: function () { this.map.getExtent() }, openInfoWindow: function (e, t, r, a, s) { this.coordTrans.from(e.x, e.y, this.coordinate); var o = {}, n = (o = this.coordTrans.toWGS84()).lon, i = o.lat; return this.addPopup(n, i, "", t, r, a, s) }, closeInfoWindow: function () { this.popup && this.map.removePopup(this.popup) }, removeItem: function (e) { if (null == e) return !1; e.drawing && 1 == e.drawing && this.measure.clearDrawLastOne(); var t = new Array; if (isArray(e) ? t = e : t.push(e), !(t.length <= 0) && t[0]) for (var r = 0; r < t.length; r++) { var a = t[r]._$groupid, s = t[r]; if (s.type) switch (s.type.toString().toLowerCase()) { case "dgkml": this.easykml.removeKml(s.id); break; case "dgsource": s.options.bg ? this.layerSwitcher.removeLayer(s) : s.instance && void 0 != this.map.layers.getById(s.instance.id) && this.map.removeLayer(s.instance); for (o = this.layers.length - 1; o >= 0; o--) s.id == this.layers[o].id && this.layers.splice(o, 1); break; case "gmarker": for (o = 0; o < this.gmarkers.length; o++) "_DRAW_" + this.gmarkers[0]._$groupid == "_DRAW_" + a && this.gmarkers.indexPop(o); this.map.getLayersByName("_DRAW_" + a).length >= 1 && (layer = this.map.getLayersByName("_DRAW_" + a)[0], this.map.removeLayer(layer)), this.map.getLayersByName("_MARKERS_" + a).length >= 1 && (layer = this.map.getLayersByName("_MARKERS_" + a)[0], this.map.removeLayer(layer)); break; case "dgchart": for (var o = this.dgcharts.length - 1; o >= 0; o--) this.dgcharts[o].id == a && (this.dgcharts[o].destroy(), this.dgcharts.indexPop(o)); break; default: this.map.getLayersByName("_DRAW_" + a).length >= 1 && (_$EZMAP.varables.layer = this.map.getLayersByName("_DRAW_" + a)[0], this.map.removeLayer(_$EZMAP.varables.layer)), this.map.getLayersByName("_MARKERS_" + a).length >= 1 && (_$EZMAP.varables.layer = this.map.getLayersByName("_MARKERS_" + a)[0], this.map.removeLayer(_$EZMAP.varables.layer)) } } }, _popupItem: function (e) { for (s = this.items.length - 1; s >= 0; s--) for (var t = this.items[s], r = t.length - 1; r >= 0; r--) { var a = t[r]; if (null != a && void 0 != a && a.id === e) { this.items[s].splice(r, 1); break } } for (var s = this.items.length - 1; s >= 0; s--) this.items[s].length <= 0 && this.items.indexPop(s) }, formatItem: function (e) { if (null == e) return null; if (e.length <= 0) return null; var t = new Array; return isArray(e) ? t = e : t.push(e), t }, addItem: function (t) { if (null == t) return !1; if (t.length <= 0) return !1; for (var r = this.formatItem(t), a = [], s = [], o = [], n = [], i = 0; i < r.length; i++) if (null != r[i]) switch (r[i]._$groupid = this.itemsn, r[i].type.toString().toLowerCase()) { case "dgsource": if (this.getLayersByName(r[i].options.name).length > 0) return this.debug && console.error(e.EasymapErr + "圖層名稱重覆" + r[i].options.name), !1; r[i].id = "dgsource_" + this.itemsn + "_" + i, a.push(r[i]); break; case "dgkml": r[i].id = "dgkml_" + this.itemsn + "_" + i, o.push(r[i]); break; case "dgchart": r[i].id = "dgchart_" + this.itemsn + "_" + i, n.push(r[i]); break; case "point": case "curve": case "polygon": case "polyline": r[i].id = "draw_" + this.itemsn + "_" + i, s.push(r[i]); break; case "marker": r[i].id = "marker_" + this.itemsn + "_" + i, s.push(r[i]); break; case "gmarker": r[i].id = "gmarker_" + this.itemsn + "_" + i, s.push(r[i]) } this.itemsn++, this.items.push(r), a.length > 0 && this.addDgSources(a), o.length > 0 && this.addKmls(o), s.length > 0 && this.addDraws(s), n.length > 0 && this.addCharts(n), this.map.resetLayersZIndex() }, addCharts: function (t) { var r = new e.BaseType.dgChart(t[0]._$groupid, this.map, t); this.dgcharts.push(r) }, addKmls: function (e) { var t = this, r = e, a = e.length - 1, s = setInterval(function (e) { if (a < 0) clearInterval(s); else { r[a]; t.easykml.addKml(r[a]) } a-- }, 20) }, addDgSources: function (e) { for (var t = 0; t < e.length; t++) this.layers.push(e[t]), this.addDgSource(e[t]) }, addDraws: function (e) { var t = e[0]._$groupid, r = new OpenLayers.Layer.Vector("_DRAW_" + t), a = new OpenLayers.Layer.Markers("_MARKERS_" + t); this.map.addLayer(r), this.map.addLayer(a); for (var s = 0; s < e.length; s++) { var o = e[s], n = null, i = null; switch (o.instance = this, o.type.toString().toLowerCase()) { case "point": n = this.point(o), r.addFeatures([n]), o.layer = r; break; case "curve": n = this.curve(o), r.addFeatures([n]), o.layer = r; break; case "polygon": n = this.polygon(o), r.addFeatures([n]), o.layer = r; break; case "polyline": n = this.polyline(o), r.addFeatures([n]), o.layer = r; break; case "marker": i = this.marker(o), a.addMarker(i), o.marker = i, o.layer = a; break; case "gmarker": var l = this.gmarker("_DRAW_" + e[0]._$groupid, o); o.layer = l } } r.features.length <= 0 && this.map.removeLayer(r), a.markers.length <= 0 && this.map.removeLayer(a) }, point: function (e) { var t = OpenLayers.Util.extend({}, OpenLayers.Feature.Vector.style.default); null == e.ptRadius && (e.ptRadius = 5); var r = this.rgbToHex(e.fillStyle); t.fillColor = r.color, t.fillOpacity = r.alpha, t.strokeColor = r.color, t.strokeOpacity = r.alpha, t.pointRadius = e.ptRadius, this.coordTrans.from(e.x, e.y, this.coordinate); var a = {}; a = this.coordTrans.toWGS84(), a = this.fromWGS84(a.lon, a.lat); var s = new OpenLayers.Geometry.Point(a.lon, a.lat); return pointFeature = new OpenLayers.Feature.Vector(s, null, t), pointFeature }, gmarker: function (t, r) { var a = []; if (r.markers.length <= 0) return null; for (var s = 0; s < r.markers.length; s++) { var o = r.markers[s], n = this.fromCoord(o.xy.x, o.xy.y), i = new OpenLayers.Feature.Vector(new OpenLayers.Geometry.Point(n.lon, n.lat)); i.dgmarker = o, a.push(i) } var l = new OpenLayers.Style({ pointRadius: "0", fillColor: "#ffcc66", fillOpacity: 0, strokeColor: "#cc6633", strokeWidth: "0", strokeOpacity: 0 }, { context: { width: function (e) { return 1 }, radius: function (e) { return 2 } } }); strategy = new e.Strategy.Cluster, strategy.gmarker = r, strategy.mm = this, clusters = new OpenLayers.Layer.Vector(t, { strategies: [strategy], styleMap: new OpenLayers.StyleMap({ default: l, select: { fillColor: "#8aeeef", strokeColor: "#32a8a9" } }) }); var h = new OpenLayers.Control.SelectFeature(clusters, { hover: !0 }); return this.map.addControl(h), h.activate(), this.map.addLayers([clusters]), this.gmarkers.push(r), strategy.distance = r.distance, strategy.threshold = r.threshold, clusters.addFeatures(a), clusters }, curve: function (e) { if (!e.x || !e.y) return !1; try { e.arcAngle1 = parseInt(e.arcAngle1), e.arcAngle2 = parseInt(e.arcAngle2) } catch (e) { this.debug && alert(e) } null == e.clockwise && (e.clockwise = !0); var t = null, r = -306, a = 0, s = 25e3, o = "#ffddee", n = .8, i = "#000000", l = .8, h = 2; if (null != e.fillStyle && e.fillStyle.length >= 1 && (o = (c = this.rgbToHex(e.fillStyle)).color, n = c.alpha), null != e.strokeStyle && e.strokeStyle.length >= 1) { var c = this.rgbToHex(e.strokeStyle); i = c.color, l = c.alpha } if (null != e.lineWidth) try { h = parseInt(e.lineWidth) } catch (e) { } if (null != e.ptRadius) try { s = e.ptRadius } catch (e) { } this.coordTrans.from(e.x, e.y, this.coordinate); var m = {}; try { var u = (m = this.coordTrans.toWGS84()).lon, p = m.lat; m = this.fromWGS84(u, p) } catch (e) { this.debug && alert(e) } t = new OpenLayers.Geometry.Point(m.lon, m.lat), a = e.arcAngle1; var y = []; (r = 1 == e.clockwise ? -e.arcAngle2 : e.arcAngle2) < 360 && y.push(new OpenLayers.Geometry.Point(t.x, t.y)); for (var d = 0; d < 101; d++) { var g = r - (r - a) * d / 100, v = t.x + s * Math.cos(g * Math.PI / 180), f = t.y + s * Math.sin(g * Math.PI / 180), L = new OpenLayers.Geometry.Point(v, f); y.push(L) } r < 360 && y.push(new OpenLayers.Geometry.Point(t.x, t.y)); var w = { fillColor: o, fillOpacity: n, strokeColor: i, strokeOpacity: l, strokeWidth: h, strokeLinecap: "round", strokeDashstyle: "solid" }, S = new OpenLayers.Geometry.LinearRing(y), k = new OpenLayers.Geometry.Polygon([S]); return new OpenLayers.Feature.Vector(k, null, w) }, polygon: function (e) { var t = "#ee9900", r = .8, a = "#cccccc", s = .8, o = 2; if (null != e.fillStyle && e.fillStyle.length >= 1 && (t = (n = this.rgbToHex(e.fillStyle)).color, r = n.alpha), null != e.strokeStyle && e.strokeStyle.length >= 1) { var n = this.rgbToHex(e.strokeStyle); a = n.color, s = n.alpha } null != e.lineWidth && (o = parseInt(e.lineWidth)); for (var i = { fillColor: t, fillOpacity: r, strokeColor: a, strokeOpacity: s, strokeWidth: o, strokeLinecap: "round", strokeDashstyle: "solid" }, l = [], h = e.xys, c = 0; c < h.length; c++) { u = h[c]; this.coordTrans.from(u.x, u.y, this.coordinate); var m = {}; m = this.coordTrans.toWGS84(), m = this.fromWGS84(m.lon, m.lat); var u = new OpenLayers.Geometry.Point(m.lon, m.lat); l.push(u) } l.push(l[0]); var p = new OpenLayers.Geometry.LinearRing(l), y = new OpenLayers.Geometry.Polygon([p]); return new OpenLayers.Feature.Vector(y, null, i) }, polyline: function (e) { var t = "#0000ff", r = .5, a = 2; if (null != e.strokeStyle && e.strokeStyle.length >= 1) { var s = this.rgbToHex(e.strokeStyle); t = s.color, r = s.alpha } if (null != e.lineWidth) try { a = parseInt(e.lineWidth) } catch (e) { } for (var o = [], n = e.xys, i = 0; i < n.length; i++) { h = n[i]; this.coordTrans.from(h.x, h.y, this.coordinate); var l = {}; l = this.coordTrans.toWGS84(), l = this.fromWGS84(l.lon, l.lat); var h = new OpenLayers.Geometry.Point(l.lon, l.lat); o.push(h) } var c = new OpenLayers.Geometry.LineString(o), m = { strokeColor: t, strokeOpacity: r, strokeWidth: a }; return new OpenLayers.Feature.Vector(c, null, m) }, marker: function (t) { var r = null, a = t.xy.x, s = t.xy.y, o = this.fromCoord(a, s); if (null != o) { var n = null; switch (t.iconType.toString().toLowerCase()) { case "string": g = new e.HtmlStr(t.htmlstr, this); r = new OpenLayers.Marker(o, g), t.content && (n = t.content); var i = r.icon.imageDiv.getElementsByClassName("ezmap_htmlstr_marker")[0]; t.onclick && i.addEventListener("click", t.onclick), t.ondblclick && i.addEventListener("dblclick", t.ondblclick), t.onmouseover && i.addEventListener("mouseover", t.onmouseover), t.onmouseout && i.addEventListener("mouseout", t.onmouseout), t.onmousedown && i.addEventListener("mousedown", t.onmousedown), t.onmouseup && i.addEventListener("mouseup", t.onmouseup); break; case "dgicon": var l = 24, h = 24, c = "", m = t.iconObject; m.width && (l = m.width), m.height && (h = m.height), m.src && (c = m.src), t.content && (n = t.content); var u = null; u = new OpenLayers.Size(l, h); var p = null; if (m.offset) { var y = m.offset[0], d = m.offset[1]; try { y = parseInt(y), d = parseInt(d) } catch (e) { y = -1 * l / 2, d = -1 * h / 2 } p = new OpenLayers.Pixel(y, d) } else p = new OpenLayers.Pixel(-u.w / 2, -u.h / 2); var g = new OpenLayers.Icon(c, u, p); r = new OpenLayers.Marker(o, g), t.onclick && r.events.on({ touchstart: t.onclick, click: t.onclick, scope: t }), t.ondblclick && r.events.on({ touchstart: t.ondblclick, dblclick: t.ondblclick, scope: t }), t.onmouseover && r.events.on({ mouseover: t.onmouseover, scope: t }), t.onmouseout && r.events.on({ mouseout: t.onmouseout, scope: t }), t.onmousedown && r.events.on({ mousedown: t.onmousedown, scope: t }), t.onmouseup && r.events.on({ mouseup: t.onmouseup, scope: t }) } if (n) { r.events.object.icon.imageDiv.className = n; var v = this; r.events.on({ touchstart: function (e) { this.onMarkerClick(e, v) }, click: function (e) { this.onMarkerClick(e, v) }, scope: this }) } return r } }, onMarkerClick: function (e, t) { for (var r = this.map.getLayer(e.element.parentElement.id), a = null, s = 0; s < r.markers.length; s++) { var o = r.markers[s]; if (o.icon.imageDiv.id == e.element.id) { a = o; break } } if (a) { var n = a.lonlat, i = (n = t.toWGS84(n.lon, n.lat)).lon, l = n.lat, h = ""; h = is_ie ? e.element.className : e.currentTarget.className, this.addPopup(i, l, "", h, null, null, null) } }, reposMark: function (e) { var t = this.fromCoord(e.xy.x, e.xy.y); e.marker.lonlat.lon = t.lon, e.marker.lonlat.lat = t.lat, e.layer.redraw() }, addPopup: function (e, t, r, a, s, o, n) { this.popup && this.map.removePopup(this.popup); var i = null; return null != s && null != o && (i = new OpenLayers.Size(s, o)), null == r || r.length <= 0 || (a = "<b style='font-size:14px;color:#333333;'>" + r + "</b><br/>" + a), this.popup = new OpenLayers.Popup.FramedCloud("_POPUP_", this.fromWGS84(e, t), i, a, null, !0, n), this.popup.autoSize = null == s || null == o, this.map.addPopup(this.popup), this._setPopupTop(), !0 }, _setPopupTop: function () { this.popup && (this.popup.div.style.zIndex = this.getMaxZIndex()) }, getDrawResult: function () { return this.measure.drawRval }, getDrawResultObject: function () { var e = this.measure, t = e.drawRval.slice(), r = null; switch (e.useControlName) { case "polyline": e.layer.features.length >= 1 && ((r = new dgPolyline(e.drawRval, "rgba(200,0,0,0.8)", 2)).instance = e.layer.features[e.layer.features.length - 1], t.push(r), t.drawing = !0); break; case "polygon": e.layer.features.length >= 1 && ((r = new dgPolygon(e.drawRval, "rgba(200,0,0,0.8)", 2)).instance = e.layer.features[e.layer.features.length - 1], t.push(r), t.drawing = !0) } return t }, getDrawMeasure: function () { return this.measure.drawRobj }, clearMarker: function () { this.measure.clearMarker(); for (var e = this.items.length - 1; e >= 0; e--) for (var t = this.items[e], r = t.length - 1; r >= 0; r--) { var a = t[r]; if (a.type) switch (a.type.toLowerCase()) { case "marker": this.removeItem(a) } } }, clearDraw: function () { this.measure.clearDraw(); for (var e = this.items.length - 1; e >= 0; e--) for (var t = this.items[e], r = t.length - 1; r >= 0; r--) { var a = t[r]; if (a.type) { var s = a.type.toLowerCase(); "polygon" != s && "polyline" != s && "curve" != s && "rectangle" != s || this.removeItem(a) } } }, sDrawMode: function (e, t, r) { this.measure.setActiveControl(e, t, r) }, cDrawMode: function () { this.measure.deactivate() }, attachEvent: function (e, t) { if (t == dgFMenu && dgCMenu.length >= 1 && (document.oncontextmenu = function () { return !1 }), null == t || !t || void 0 == t) { for (var r = 0; r < this.events.length; r++) { var a = this.events[r]; e == a.type && this.detachEvent(a.type, a.handler) } return void (this.events = []) } var s = null; switch (e.toString().toLowerCase()) { case "onmousedown": s = "mousedown"; break; case "onmouseup": s = "mouseup"; break; case "onmousemove": s = "mousemove"; break; case "onclick": s = "click"; break; case "ondblclick": s = "dblclick"; break; case "preaddlayer": case "addlayer": case "removelayer": case "changelayer": case "movestart": case "moveend": case "zoomstart": case "zoomend": case "changebaselayer": case "mouseover": case "mouseout": case "mousedown": case "mouseup": case "mousemove": case "click": case "dblclick": case "touchstart": case "touchmove": case "touchend": case "requestkmltimeout": s = e.toString().toLowerCase() } this.map.events.register(s, this.map, t, !0); this.events.push({ type: e, handler: t }) }, detachEvent: function (e, t) { var r = null; switch (e.toString().toLowerCase()) { case "onmousedown": r = "mousedown"; break; case "onmouseup": r = "mouseup"; break; case "onmousemove": r = "mousemove"; break; case "onclick": r = "click"; break; case "ondblclick": r = "dblclick"; break; case "preaddlayer": case "addlayer": case "removelayer": case "changelayer": case "movestart": case "moveend": case "zoomstart": case "zoomend": case "changebaselayer": case "mouseover": case "mouseout": case "mousedown": case "mouseup": case "mousemove": case "click": case "dblclick": case "touchstart": case "touchmove": case "touchend": r = e.toString().toLowerCase() } this.map.events.unregister(r, this.map, t, !0) }, addMapPickProc: function (e) { this.attachEvent("click", e) }, addMapDragProc: function (e) { this.attachEvent("mousedown", e) }, addMapDropProc: function (e) { this.attachEvent("mouseup", e) }, addPanProc: function (e) { this.attachEvent("moveend", e) }, addZoomProc: function (e) { this.attachEvent("zoomend", e) }, msSwitch: function (e, t) { this.switchMap(e), this.zoomTo(t) }, switchMap: function (e) { for (var t = 0; t < this.layers.length; t++) if (e == this.layers[t].options.name) { this.layerSwitcher.changeBaseLayer(this.layers[t]); break } }, getMapName: function () { return this.layerSwitcher.baseLayerId }, getLayersByName: function (e) { for (var t = [], r = 0; r < this.layers.length; r++) this.layers[r].options.name == e && t.push(this.layers[r]); return t }, getLayerById: function (e) { for (var t = 0; t < this.layers.length; t++) if (this.layers[t].id == e) return this.layers[t] }, addDgSource: function (e) { var t = e.options, r = t.bg, a = t.chname, s = (t.name, this.getDgSource(e)); if (a && (s.chname = a), s.dgsource = e, e.instance = s, r) this.layerSwitcher && this.layerSwitcher.addLayer(e); else { var o = this.getLayerTopIndex() + 1; this.map.addLayers([s]), this.map.setLayerIndex(s, o) } return !0 }, getLayerTopIndex: function () { for (var e = 0, t = 0; t < this.map.layers.length; t++) { var r = ""; try { r = this.map.layers[t].CLASS_NAME } catch (e) { continue } switch (r.toLowerCase()) { case "mm.layer.google": case "openlayers.layer.bing": case "openlayers.layer.wms": case "openlayers.layer.wmts": e = this.map.getLayerIndex(this.map.layers[t]) } } return e }, getDgSource: function (t) { var r = t.options, a = null; switch (t.layer.toString().toLowerCase()) { case "bing": if (!r.key) return console.error(e.EasymapErr + "bing map遺失key"), null; if (!r.url) return console.error(e.EasymapErr + "bing map遺失url"), null; r.chname || (r.chname = ""); var s = t.id, o = (r.chname, r.url), n = r.key, i = r.type; (a = new OpenLayers.Layer.Bing({ name: s, key: n, url: [o], type: i })).url = "string" == typeof o ? [o] : o; break; case "google": case "osm": var s = t.id, o = (r.chname, r.url), l = {}; l.resolutions = r.resolutions, l.serverResolutions = r.serverResolutions, a = new e.Layer.Google(s, o, l); break; case "wmts": var s = t.id, o = r.url, h = r.layer, c = r.matrixSet, m = r.matrixIds, u = r.format, p = r.serverResolutions, y = r.style, d = r.radio, g = r.transparent, v = r.zoomOffset; y && null !== y && "" !== y || (y = "default"), d && null !== d && "" !== d || (d = 1), g = !g || null === g || "" === g || "false" !== (g = g.toLowerCase() + ""), void 0 == v && (v = 0), a = new OpenLayers.Layer.WMTS({ name: s, url: o, layer: h, matrixSet: c, matrixIds: m, format: u, style: y, serverResolutions: p, ratio: d, transitionEffect: null, zoomOffset: v, isBaseLayer: !0 }); break; case "wms": var s = t.id, o = r.url, h = r.layer, f = !0, L = !0, w = 1, S = "EPSG:4326", g = r.transparent, u = r.format; null != r.singleTile && (f = r.singleTile), null != r.bg && (L = r.bg), null != r.projection && (S = r.projection), null != r.opacity && (w = r.opacity), g && null !== g && "" !== g ? (1 == g && (g = g.toString()), 0 == g && (g = g.toString()), g = "false" !== (g = g.toLowerCase() + "")) : g = !0, u && null !== u && "" !== u || (u = "image/jpeg"), a = new OpenLayers.Layer.EZWMS(s, o, { layers: h, isBaseLayer: L, transparent: g, format: u }, { singleTile: f, ratio: 1, opacity: w, transitionEffect: null, mm_projection: S }); break; case "arcgis": var s = t.id, o = r.url, h = r.layer, g = r.transparent, k = r.bg, w = r.opacity, C = r.projection; g && null !== g && "" !== g || (g = !0), k && null !== k && "" !== k || (k = !1), w && null !== w && "" !== w || (w = 1), C && null !== C && "" !== C || (C = "EPSG:900913"), a = new OpenLayers.Layer.ArcGIS93Rest(s, o, { layers: h, transparent: g, isBaseLayer: k }, { opacity: w, mm_projection: C, mm: this }) } for (var M = t.events, b = 0; b < M.length; b++) a.events.register(M[b].event, a, M[b].callback); return a.mmtype = "dgsource", a }, getMaxLayerIndex: function () { for (var e = 0, t = 0; t < this.map.layers.length; t++) { var r = this.map.layers[t]; this.map.getLayerIndex(r) > e && (e = this.map.getLayerIndex(r)) } return e }, getMaxZIndex: function () { var e = 999999; e = this.getMaxLayerIndex(); for (var t = this.map.controls, r = 0; r < t.length; r++) { var a = t[r]; if (a.div) try { n = a.div.style.zIndex; (n = parseInt(n)) > e && (e = n) } catch (e) { } } for (var s = this.map.layers, r = 0; r < s.length; r++) { var o = s[r]; if (o.div) try { var n = o.div.style.zIndex; (n = parseInt(n)) > e && (e = n) } catch (e) { } } return e + 1 }, setGMarkerTop: function (e) { e.layer && e.layer.strategies.length > 0 && this.setZIndexTop(e.layer.strategies[0].markers) }, setLayersToTop: function (e) { if (null == e) return !1; if (e.length <= 0) return !1; for (var t = this.formatItem(e), r = 0; r < t.length; r++) switch ((a = t[r]).type.toString().toLowerCase()) { case "dgsource": this.map.setLayerIndex(a.instance, this.getMaxLayerIndex() + 1); break; default: a.layer && this.setZIndexTop(a.layer) } for (r = 0; r < t.length; r++) { var a = t[r]; if ("dgchart" == a.type.toString().toLowerCase()) for (var s = 0; s < this.dgcharts.length; s++) if (this.dgcharts[s].id == a._$groupid) { this.setZIndexTop(this.dgcharts[s].layer); break } } this._setPopupTop() }, setZIndexTop: function (e) { for (var t = 9999, r = 0; r < this.map.layers.length; r++) { var a = this.map.layers[r], s = parseInt(a.getZIndex()); s > t && (t = s) } t = parseInt(t) + 1, e.setZIndex(t) }, setDrawToTop: function () { this.map.setLayerIndex(this.measure.layer, this.getMaxLayerIndex() + 1), this.map.setLayerIndex(this.measure.markerLayer, this.getMaxLayerIndex() + 2) }, disableLoading: function () { this.statusbar && (this.statusbar.sw_loading = !1) }, enableLoading: function () { this.statusbar && (this.statusbar.sw_loading = !0) }, getUpperZoomByBoundary: function (e, t) { var r = e.x, a = e.y; this.coordTrans.from(r, a, this.coordinate); var s = this.coordTrans.toWGS84(); r = s.lon, a = s.lat; var o = t.x, n = t.y; this.coordTrans.from(o, n, this.coordinate), o = (s = this.coordTrans.toWGS84()).lon, n = s.lat; var i = new OpenLayers.Bounds; i.extend(this.fromWGS84(r, a)), i.extend(this.fromWGS84(o, n)); var l = i.getCenterLonLat(), h = this.map.getZoomForExtent(i); this.zoomTo(h), this.map.setCenter(l, h) }, toHex: function (e) { return null == e ? "00" : 0 == (e = parseInt(e)) || isNaN(e) ? "00" : (e = Math.max(0, e), e = Math.min(e, 255), e = Math.round(e), "0123456789ABCDEF".charAt((e - e % 16) / 16) + "0123456789ABCDEF".charAt(e % 16)) }, rgbToHex: function (e) { var t = {}; if ("rgb" == e.substring(0, 3).toLowerCase()) { var r = e.split(","), a = 0; a = (a = r[0].toLowerCase().replace("rgba(", "").trim()).toLowerCase().replace("rgb(", "").trim(); var s = r[1].trim(), o = r[2].trim(), n = r[3].replace(")", "").trim(), i = [this.toHex(a), this.toHex(s), this.toHex(o)]; return t.color = "#" + i.join(""), t.alpha = parseFloat(n), t } return t.color = "#ee9900", t.alpha = "0.8", null }, fromWGS84: function (e, t) { return new OpenLayers.LonLat(e, t).transform(new OpenLayers.Projection("EPSG:4326"), this.map.getProjectionObject()) }, toWGS84: function (e, t) { return new OpenLayers.LonLat(e, t).transform(this.map.getProjectionObject(), new OpenLayers.Projection("EPSG:4326")) }, fromCoord: function (e, t) { this.coordTrans.from(e, t, this.coordinate); var r = {}, e = (r = this.coordTrans.toWGS84()).lon, t = r.lat; return this.fromWGS84(e, t) }, toCoord: function (e, t) { var r = new OpenLayers.LonLat(e, t); r.transform(this.map.getProjectionObject(), new OpenLayers.Projection("EPSG:4326")), this.coordTrans.from(r.lon, r.lat, this.coordTrans.WGS84); var a = {}; switch (this.coordinate) { case this.coordTrans.TM2_67: a = this.coordTrans.toTM2_67(); break; case this.coordTrans.TM2_97: a = this.coordTrans.toTM2_97(); break; case this.coordTrans.TWD67: a = this.coordTrans.toTWD97(); break; case this.coordTrans.TWD97: case this.coordTrans.WGS84: a = this.coordTrans.toWGS84() } return a }, revXY: function (e) { try { var t = document.getElementById(this.map.div.id).getBoundingClientRect(); e.x = e.x - t.left, e.y = e.y - t.top } catch (e) { } var r = this.map.getLonLatFromPixel(e); return this.toCoord(r.lon, r.lat) }, tranXY: function (e) { var t = this.fromCoord(e.x, e.y); return this.map.getPixelFromLonLat(t) }, exCoordTrans: function (e, t, r) { var a = new CoordTrans; return a.from(e, t, r), a }, calDistance: function (e, t) { var r = this.fromCoord(e.x, e.y), a = this.fromCoord(t.x, t.y), s = new OpenLayers.Geometry.Point(r.lon, r.lat), o = new OpenLayers.Geometry.Point(a.lon, a.lat); return new OpenLayers.Geometry.LineString([s, o]).getGeodesicLength(new OpenLayers.Projection("EPSG:900913")) }, CLASS_NAME: "MM.ol" }) }(EzMap);