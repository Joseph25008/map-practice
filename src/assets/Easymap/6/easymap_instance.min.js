function Easymap(a, b) { var c = ""; if ("string" == typeof a && (c = a, a = document.getElementById(a)), "object" == typeof a && (c = a.id), c && !(c.length <= 0)) { var d = document.getElementById(c).style.width, e = document.getElementById(c).style.height; "" == d && (document.getElementById(c).style.width = "300px"), "" == e && (document.getElementById(c).style.height = "300px"), "undefined" != typeof mname && (_mname = mname); var f = !1; _coord || (_coord = "WGS84", f = !0), _debug || (_debug = !1), b && b.cx && (cx = b.cx), b && b.cy && (cy = b.cy), b && b.cz && (cz = 7), "undefined" != typeof dcz && (_dcz = dcz), "undefined" == typeof _sAuthor && (_sAuthor = !1), "undefined" != typeof sAuthor && (_sAuthor = sAuthor), "undefined" != typeof sStatus && (_sStatus = sStatus), "undefined" != typeof sScaleBar && (_sScaleBar = sScaleBar), zmScaleLine || (zmScaleLine = [10, 10]), zmWMap || (zmWMap = [0, 0]), zmSwitcher || (zmSwitcher = [10, 10]), _lineStyle || (_lineStyle = { strokeWidth: 3, strokeOpacity: 1, strokeColor: "#666666", strokeDashstyle: "dash" }), _polygonStyle || (_polygonStyle = { strokeWidth: 3, strokeOpacity: 1, strokeColor: "#666666", fillColor: "#ffffff", fillOpacity: .5, strokeDashstyle: "dash" }); var g = new EzMap.ol(c, { coordinate: _coord, resolutions: _resolutions, numZoomLevels: _numZoomLevels, center: { x: cx, y: cy }, zoom: cz, errorPic: _error_pic, debug: _debug, layers: _dm4_maps, dcz: _dcz, mname: _mname, sStatus: _sStatus, sScaleBar: _sScaleBar, zmScaleLine: zmScaleLine, zmScaleBK: zmScaleBK, zmWMap: zmWMap, zmSwitcher: zmSwitcher, root: _dgmap4path, lineStyle: _lineStyle, polygonStyle: _polygonStyle, sAuthor: _sAuthor, isEasymap5_mapini: f, easymap: this }); this.mm = g, this.div = g.map.div, this.instance = g, this.dgCMenu = [], this.olmap = g.map, this.dgFMenu = function (a) { if (2 == a.button) { if (null === this.dgCMenu) return; if (void 0 === this.dgCMenu) return; if (this.dgCMenu.length <= 0) return; if (document.getElementById("exMenu")) exmdiv.style.left = a.clientX + "px", exmdiv.style.top = a.clientY + "px", exmdiv.style.visibility = "visible"; else { for (exmdiv = document.createElement("div"), exmdiv.id = "exMenu", exmdiv.style.cssText = "position:absolute;border: 1px solid rgba(181, 181, 181, 0.72);background-color:#fff;z-index:9899999;color:rgb(45, 45, 45);font-size:14px;padding: 1px;font-family: Microsoft JhengHei;box-shadow:rgba(132, 132, 132, 0.29) 3px 3px 0.05em 1px;", exmdiv.style.left = a.clientX + "px", exmdiv.style.top = a.clientY + "px", ic = 0; ic < this.dgCMenu.length; ic++) { tmpdiv = document.createElement("div").cloneNode(!0), tmpdiv.style.cssText = "position:relative;margin:1px;white-space:nowrap;padding:2px 10px 2px 2px;", tmpdiv.onmouseover = function () { this.style.cursor = "pointer", this.style.backgroundColor = "#DFDFDF" }, tmpdiv.onmouseout = function () { this.style.backgroundColor = "#fff" }; var b = _dgmap4path + "imgs/blank.png"; null != this.dgCMenu[ic].icon && (b = this.dgCMenu[ic].icon), tmpdiv.innerHTML = this.dgCMenu[ic].mname, tmpdiv.onclick = this.dgCMenu[ic].afunc, exmdiv.appendChild(tmpdiv) } document.body.appendChild(exmdiv), exmdiv.onmousedown = function () { if (2 == event.button) return !1 }, exmdiv.oncontextmenu = function () { return !1 }, tmpimg = new Image, tmpimg.src = _dgmap4path + "imgs/close.gif" } return !1 } return document.getElementById("exMenu") && (document.getElementById("prtDialog") && (prtddiv.style.visibility = "hidden"), exmdiv.style.visibility = "hidden"), !1 }, this.instance.map.events.on({ click: this.dgFMenu, mousedown: this.dgFMenu, scope: this }), this.setCoordinate = function (a) { this.instance.setCoordinate(a) }, this.getCoordinate = function () { return this.instance.coordinate }, this.setKmlProxy = function (a) { this.instance.setKmlProxy(a) }, this.addMenu = function (a) { this.dgCMenu.push(a), 1 == this.dgCMenu.length && (this.instance.map.div.oncontextmenu = function () { return !1 }, this.instance.map.div.onmousedown = function () { if (2 == event.button) return !1 }) }, this.resize = function (b, c) { a.style.width = b + "px", a.style.height = c + "px"; try { this.instance.resizeTo(b, c) } catch (a) { return !1 } return !0 }, this.zoomToXY = function (a, b) { return null != a && null != b && (this.getZoomLevel() != b ? this.instance.setCenter(a, b) : this.panTo(a), !0) }, this.goXY = function (a) { return null != a && (this.instance.setCenter(a, this.getZoomLevel()), !0) }, this.zoomTo = function (a) { return null != a && (this.instance.zoomTo(a), !0) }, this.setZoom = function (a) { this.setZoomLevel(a) }, this.setZoomLevel = function (a) { null != a && this.instance.setZoom(a) }, this.panTo = function (a, b) { this.instance.exPanTo(a, b) }, this.zoomIn = function () { return this.instance.zoomIn(), !0 }, this.zoomOut = function () { return this.instance.zoomOut(), !0 }, this.setDrawTop = function () { this.instance.setDrawToTop() }, this.setZIndexTop = function (a) { return this.instance.setLayersToTop(a), !0 }, this.setItemTop = function (a) { return this.instance.setLayersToTop(a), !0 }, this.addItem = function (a) { return this.instance.addItem(a), !0 }, this.removeItem = function (a) { return this.instance.removeItem(a), !0 }, this.getCX = function () { return this.instance.getCX() }, this.getCY = function () { return this.instance.getCY() }, this.getCenter = function () { return new dgXY(this.getCX(), this.getCY()) }, this.getRectBound = function () { return this.instance.getRectBound() }, this.getZoom = function () { return this.getZoomLevel() }, this.getZoomLevel = function () { return this.instance.getZoom() }, this.getPScale = function () { return this.instance.pscale }, this.getXScale = function () { return this.instance.map.getResolution() }, this.getYScale = function () { return this.instance.map.getResolution() }, this.getWidth = function () { return this.instance.getWidth() }, this.getHeight = function () { return this.instance.getHeight() }, this.getMapName = function () { return this.instance.getMapName() }, this.getStatusBar = function () { return this.instance.stdiv }, this.setScaleBarXY = function (a) { this.instance.isbxy = null == this.instance.isbxy ? a : this.instance.isbxy, this.instance.sbdiv.style.left = a[0] + "px", this.instance.sbdiv.style.top = a[1] + "px" }, this.switchMap = function (a) { return null != a && void this.instance.switchMap(a) }, this.switchMapType = function (a, b) { return null != a && (null == b ? this.instance.msSwitch(a, this.getZoomLevel()) : this.instance.msSwitch(a, b)) }, this.addMapControl = function (a) { this.instance.addMapControl(a) }, this.stopNavigation = function () { this.instance.stopNavigation() }, this.startNavigation = function () { this.instance.startNavigation() }, this.addMapTypeSelector = function (a, b) { this.instance.addMapTypeSelector(a, b) }, this.addWMap = function (a, b) { this.instance.addWMap(a, b) }, this.addMeasure = function () { this.instance.addMeasure() }, this.clearMarker = function () { try { this.instance.clearMarker() } catch (a) { return !1 } return !0 }, this.clearDraw = function () { return this.instance.clearDraw(), !0 }, this.openInfoWindow = function (a, b, c, d, e) { return this.instance.openInfoWindow(a, b, c, d, e), !0 }, this.closeInfoWindow = function () { return this.instance.closeInfoWindow(), !0 }, this.refreshMap = function () { this.instance.reloadMapPic() }, this.setDrawMode = function (a, b, c) { a && this.instance.sDrawMode(a, b, c) }, this.cancelDrawMode = function () { this.instance.cDrawMode() }, this.getDrawResult = function () { return this.instance.getDrawResult() }, this.getDrawResultObject = function () { return this.instance.getDrawResultObject() }, this.getDrawMeasure = function () { return this.instance.getDrawMeasure() }, this.clearDrawResult = function () { this.instance.drawRval = null }, this.isDrawMode = function (a) { return this.instance.measure.isActive() }, this.setDraggable = function (a) { this.instance.setMapDraggable(a) }, this.getMapControlV = function () { return this.instance.getMapControlV() }, this.setMapControlV = function (a) { this.instance.setMapControlV(a) }, this.setMapControl = function (a) { this.instance.setMapControl(a) }, this.setWMapV = function (a) { this.instance.setWMapV(a) }, this.getMapTypeSelectorV = function () { return this.instance.getMapTypeSelectorV() }, this.setMapTypeSelectorV = function (a) { this.instance.setMapTypeSelectorV(a) }, this.revXY = function (a, b) { var c = this.instance.revXY({ x: a, y: b }); return new dgXY(c.lon, c.lat) }, this.coordTrans = function (a, b, c) { return this.instance.exCoordTrans(a, b, c) }, this.tranXY = function (a) { return this.instance.tranXY(a) }, this.toWGS84 = function (a, b) { return this.instance.toWGS84(a, b) }, this.attachEvent = function (a, b) { this.instance.attachEvent(a, b) }, this.detachEvent = function (a, b) { this.instance.detachEvent(a, b) }, this.getBestZoomByScale = function (a, b) { return this.instance.getBestZoomByScale(a, b) }, this.setWMSMode = function (a, b, c, d, e) { return null != a && (this.instance._wmsMode = a), null != b && (this.instance._wmsUrl = b), null != c && (this.instance._wmsPara = c, "string" != typeof c && (c.action = b, c.target = "_wmsFrame_")), null != d && (this.instance._wmsMinZ = d), null != e && (this.instance._wmsMaxZ = e), this.instance.document.getElementById("_wmsPIC_") }, this.createDiv = function (a, b, c, d, e, f, g, h) { return this.instance.createDiv(a, b, c, d, e, f, g, h) }, this.removeDiv = function (a) { this.instance.removeDiv(a) }, this.getWMSMode = function (a) { return "Mode" == a ? this.instance._wmsMode : "Url" == a ? this.instance._wmsUrl : "Para" == a ? this.instance._wmsPara : null }, this.refreshWMS = function () { this.instance.getWMS() }, this.getUpperZoomByBoundary = function (a, b) { null != a && null != b && this.instance.getUpperZoomByBoundary(a, b) }, this.getScaleByZoom = function (a) { return this.instance.getScaleByZoom(a) }, this.wheelZoom = function (a) { this.instance.swheelZoom(a) }, this.calDistance = function (a, b) { return this.instance.calDistance(a, b) }, this.disableLoading = function () { this.instance.disableLoading() }, this.enableLoading = function () { this.instance.enableLoading() }, this.setScaleLineVisible = function (a) { var b = document.getElementsByClassName("MMControlScaleLine"); b.length <= 0 || (a ? b[0].style.display = "block" : b[0].style.display = "none") } } } function dgIcon(a, b, c) { return this.src = null == a ? null : a, this.width = null == b ? 0 : b, this.height = null == c ? 0 : c, this.offset = null, this.image = document.createElement("img"), this.image.src = this.src, this.image.style.cssText = "position:absolute;z-index:0;FILTER:alpha(opacity=50);left:" + -this.width / 2 + "px;top:" + -this.height / 2 + "px", this } function dgGMarker(a, b, c) { this.type = "gmarker", this.instance = null, this.isCusterZoom = !1, this.zoom = 0, this.role = null, this.distance = 50, this.threshold = null, this.markers = [], this.click = null, this.mouseover = null, this.mouseout = null, this.mousedown = null, b && (this.distance = b), c && (this.threshold = c), this.markers = a, this.setZIndexTop = function () { this.instance.setGMarkerTop(this) }, this.setRole = function (a) { this.role = a, null != a.high && null != a.medium && null != a.picHigh && null != a.picMedium && null != a.picLow || null == this.role }, this.setZoomWithoutCluster = function (a, b) { return !!EzMap.Tools.isBoolean(a) && (this.isCusterZoom = a, null == b && (b = 0), !!EzMap.Tools.isNumber(b) && (b = parseInt(b), this.zoom = b, !0)) }, this.setDistance = function (a) { this.distance = a }, this.setThreshold = function (a) { this.threshold = a }, this.register = function (a, b) { if (a && b) switch (a) { case "click": this.click = b; break; case "mouseover": this.mouseover = b; break; case "mouseout": this.mouseout = b; break; case "mousedown": this.mousedown = b } }, this.redraw = function () { return !!this.layer && this.layer.redraw() } } function dgMarker(a, b, c) { return this.type = "marker", this.xy = null == a ? null : a, this.drag = null != c && c, this.id = null, this.htmlstr = null, this.instance = null, this.content = null, this.iconObject = null, this.icon = null, this.iconType = null, tmpobj = null == b ? dg_DEFAULT_ICON : b, tmpobj instanceof dgIcon ? (this.iconObject = tmpobj, this.icon = tmpobj, this.iconType = "dgicon") : "object" == typeof tmpobj ? (tmpdiv = document.createElement("div"), tmpdiv.appendChild(tmpobj), this.htmlstr = tmpdiv.innerHTML, this.iconType = "string") : "string" == typeof tmpobj && (this.htmlstr = tmpobj, this.iconType = "string"), this.getXY = function () { return this.xy }, this.setXY = function (a) { this.xy = a, this.instance.reposMark(this) }, this.setContent = function (a) { null != this.instance && this.instance.removeItem(this), "object" == typeof a ? (tmpdiv = document.createElement("div"), tmpdiv.appendChild(a), this.content = tmpdiv.innerHTML) : "string" == typeof a && (this.content = a), null != this.instance && this.instance.addItem(this) }, this.openInfoWindow = function (a, b, c) { null != this.instance && this.instance.openInfoWindow(this.xy, a, b, c) }, this } function dgGText(a, b, c, d) { for (this.type = "gtext", this.xys = new Array, this.instance = null, i = 0; i < a.length; i++) this.xys.push(new dgXY(a[i], b[i])); return this.htmlstrs = c, this.ids = d, this.getPoint = function (a) { for (ic = 0; ic < this.xys.length; ic++) if (this.ids[ic] == a) return this.xys[ic]; return null }, this.setPoint = function (a, b) { if (null != this.instance) for (ic = 0; ic < this.instance.markArray.length; ic++) if (this.instance.markArray[ic].id == a) return this.instance.markArray[ic].id = b, !0; return !1 }, this } function dgPoint(a, b, c) { return this.type = "point", this.x = a.x, this.y = a.y, this.instance = null, this.fillStyle = b, this.ptRadius = c, this } function dgSPoint(a, b, c) { return this.type = "spoint", this.x = a.x, this.y = a.y, this.instance = null, this.fillStyle = b, this.ptRadius = c, this } function dgCircle(a, b, c, d, e) { return this.type = "point", this.x = a.x, this.y = a.y, this.instance = null, this.fillStyle = b, this.strokeStyle = c, this.lineWidth = d, this.ptRadius = e, this } function dgPolyline(a, b, c) { for (this.type = "polyline", this.xys = a, this.instance = null, this.pcount = this.xys.length, this.strokeStyle = b, this.lineWidth = c, this.xs = new Array, this.ys = new Array, i = 0; i < this.xys.length; i++) this.xs.push(this.xys[i].x), this.ys.push(this.xys[i].y); return this.getVertexCount = function () { return this.xys.length - 2 }, this.getVertex = function (a) { return this.xys[a - 1] }, this.addVertex = function (a) { null != this.instance && this.instance.removeItem(this), this.xys.push(a), this.xs.push(a.x), this.ys.push(a.y), this.pcount = this.xys.length, null != this.instance && this.instance.addItem(this) }, this } function dgSPolyline(a, b, c) { for (this.type = "spolyline", this.xys = a, this.instance = null, this.pcount = this.xys.length, this.strokeStyle = b, this.lineWidth = c, this.xs = new Array, this.ys = new Array, i = 0; i < this.pcount; i++) this.xs.push(this.xys[i].x), this.ys.push(this.xys[i].y); return this } function dgPolygon(a, b, c, d) { for (this.id = null, this.type = "polygon", this.xys = a, this.instance = null, a[0] != a[a.length - 1] && this.xys.push(a[0]), this.pcount = this.xys.length, this.strokeStyle = b, this.fillStyle = c, this.lineWidth = d, this.xs = new Array, this.ys = new Array, i = 0; i < this.pcount; i++) this.xs.push(this.xys[i].x), this.ys.push(this.xys[i].y); return this.getVertexCount = function () { return this.xys.length - 1 }, this.getVertex = function (a) { return this.xys[a - 1] }, this.addVertex = function (a) { null != this.instance && this.instance.removeItem(this), tmpxy = this.xys.pop(), this.xys.push(a), this.xys.push(tmpxy), tmpx = this.xs.pop(), this.xs.push(a.x), this.xs.push(tmpx), tmpy = this.ys.pop(), this.ys.push(a.y), this.ys.push(tmpy), this.pcount = this.xys.length, null != this.instance && this.instance.addItem(this) }, this } function dgSPolygon(a, b, c, d) { for (this.type = "spolygon", this.xys = a, this.instance = null, a[0] != a[a.length - 1] && this.xys.push(a[0]), this.pcount = this.xys.length, this.strokeStyle = b, this.fillStyle = c, this.lineWidth = d, this.xs = new Array, this.ys = new Array, i = 0; i < this.pcount; i++) this.xs.push(this.xys[i].x), this.ys.push(this.xys[i].y); return this } function dgCurve(a, b, c, d, e, f, g, h) { return this.id = "", this.type = "curve", this.x = a.x, this.y = a.y, this.strokeStyle = b, this.fillStyle = c, this.ptRadius = d, this.lineWidth = e, this.arcAngle1 = f, this.arcAngle2 = g, this.clockwise = h, this.instance = null, this } function dgRect(a, b, c, d, e) { return this.xy1 = a, this.xy2 = b, this.strokeStyle = c, this.lineWidth = e, this.fillStyle = d, this.getSW = function () { return new dgXY(Math.min(this.xy1.x, this.xy2.x), Math.min(this.xy1.y, this.xy2.y)) }, this.getNE = function () { return new dgXY(Math.max(this.xy1.x, this.xy2.x), Math.max(this.xy1.y, this.xy2.y)) }, this.getWidth = function () { return Math.abs(this.xy1.x - this.xy2.x) }, this.getHeight = function () { return Math.abs(this.xy1.y - this.xy2.y) }, this.getCenter = function () { return new dgXY((this.xy1.x + this.xy2.x) / 2, (this.xy1.y + this.xy2.y) / 2) }, this.contains = function (a) { return a.x >= this.getSW().x && a.x <= this.getNE().x && a.y >= this.getSW().y && a.y <= this.getNE().x }, this.containsRect = function (a) { return a.getSW().x >= this.getSW().x && a.getSW().x <= this.getNE().x && a.getSW().y >= this.getSW().y && a.getSW().y <= this.getNE().x && a.getNE().x >= this.getSW().x && a.getNE().x <= this.getNE().x && a.getNE().y >= this.getSW().y && a.getNE().y <= this.getNE().x }, this.extend = function (a) { this.contains(a) || (this.xy1 = new dgXY(Math.min(this.getSW().x, a.x), Math.min(this.getSW().y, a.y)), this.xy2 = new dgXY(Math.max(this.getNE().x, a.x), Math.max(this.getNE().y, a.y))) }, this.isEmpty = function () { return null == this.xy1 || null == this.xy2 }, this } function dgMenuFunc(a, b, c) { return this.mname = a, this.afunc = b, this.icon = c, this } function printMap(a, b, c) { ddposx = null != a ? a : c.clientX, ddposy = null != b ? b : c.clientY, null == document.getElementById("prtDialog") ? (prtddiv = document.createElement("div"), prtddiv.id = "prtDialog", prtddiv.style.cssText = "background-color:#000000;position:absolute;width:260px;height:180px;border:outset 2px #A0A0A0;background-color:#F0F0F0;left:" + ddposx + "px;top:" + ddposy + "px;z-index:99;vertical-align:middle;", prtddiv.innerHTML = "<table style='width:100%;height:100%;vertical-align:middle;font-size:small;'><tr><td style='border:solid 1px #BBBBBB;'>格式</td><td style='border:solid 1px #BBBBBB;'><select id='mapSize'><option value='A4'>A4</option><option value='A3'>A3</option></select><select id='maplp'><option value='0'>橫式</option><option value='1'>直式</option></select></td></tr><tr><td style='border:solid 1px #BBBBBB;'>標題</td><td style='border:solid 1px #BBBBBB;'><input id='mapTitle' type='text' style='width:200px;' value='逢甲大學地理資訊系統中心' /></td></tr><tr><td style='border:solid 1px #BBBBBB;'>備註</td><td style='border:solid 1px #BBBBBB;'><textarea id='mapMemo' style='width:200px;height:60px;'>http://www.gis.tw/</textarea></td></tr><tr><td colspan='2' style='text-align:center;border:solid 1px #BBBBBB;'><input type='button' style='background-color:#CCCCCC;' value='列印' onclick='doPrint(this);' /></td></tr></table>", timg = new Image, timg.src = _dgmap4path + "imgs/close.gif", timg.onclick = function () { this.parentNode.style.display = "none" }, prtddiv.appendChild(timg), timg.style.cssText = "position:absolute;left:" + (parseInt(prtddiv.style.width) - 25) + "px;top:5px;cursor:pointer;", document.body.appendChild(prtddiv)) : "hidden" == document.getElementById("prtDialog").style.visibility ? (document.getElementById("prtDialog").style.visibility = "visible", document.getElementById("prtDialog").style.left = ddposx + "px", document.getElementById("prtDialog").style.top = ddposy + "px") : document.getElementById("prtDialog").style.visibility = "hidden" } function doPrint(a) { document.getElementById("prtDialog").style.visibility = "hidden", window.open("printmap.htm", "printWin") } function dgFMenu(a) { if (2 == a.button) if (document.getElementById("exMenu")) exmdiv.style.left = findPos(this.div)[0] + a.clientX + "px", exmdiv.style.top = findPos(this.div)[1] + a.clientY + "px", exmdiv.style.visibility = "visible"; else { for (exmdiv = document.createElement("div"), exmdiv.id = "exMenu", exmdiv.style.cssText = "position:absolute;border: 2px dashed #808080;background-color:#FCFCFC;z-index:998;color:#555FAA;font-size:15px;padding: 2px", exmdiv.style.left = findPos(this.div)[0] + a.clientX + "px", exmdiv.style.top = findPos(this.div)[1] + a.clientY + "px", ic = 0; ic < dgCMenu.length; ic++) tmpdiv = document.createElement("div").cloneNode(!0), tmpdiv.style.cssText = "position:relative;margin:2px;white-space:nowrap;", tmpdiv.onmouseover = function () { this.style.cursor = "pointer", this.style.backgroundColor = "#C0C0C0" }, tmpdiv.onmouseout = function () { this.style.backgroundColor = "#E7E7E7" }, tmpdiv.innerHTML = dgCMenu[ic].mname, tmpdiv.onclick = dgCMenu[ic].afunc, exmdiv.appendChild(tmpdiv); document.body.appendChild(exmdiv) } else document.getElementById("exMenu") && (document.getElementById("prtDialog") && (prtddiv.style.visibility = "hidden"), exmdiv.style.visibility = "hidden") } function calLength(a) { var b = 9999999, c = 9999999, d = 0, e = 0, f = 0, g = 0; if (a.length > 1) { for (i = 0; i < a.length - 1; i++) b > a[i].x && (b = a[i].x), c > a[i].y && (c = a[i].y), d < a[i].x && (d = a[i].x), e < a[i].y && (e = a[i].y), g = Math.sqrt((a[i].x - a[i + 1].x) * (a[i].x - a[i + 1].x) + (a[i].y - a[i + 1].y) * (a[i].y - a[i + 1].y)), f = g + f; return PolyCX = (b + d) / 2, PolyCY = (c + e) / 2, f } return PolyCX = 0, PolyCY = 0, 0 } function calArea(a) { var j, k, b = 9999999, c = 9999999, d = 0, e = 0, f = 0, g = 0, h = 0; if (a.length > 3) { for (i = 0; i < a.length - 1; i++) b > a[i].x && (b = a[i].x), c > a[i].y && (c = a[i].y), d < a[i].x && (d = a[i].x), e < a[i].y && (e = a[i].y), j = parseFloat(a[i].x), k = parseFloat(a[i + 1].y), f += j * k, j = parseFloat(a[i + 1].x), k = parseFloat(a[i].y), g += j * k; return j = parseFloat(a[parseInt(a.length) - 1].x), k = parseFloat(a[0].y), f += j * k, j = parseFloat(a[parseInt(a.length) - 1].y), k = parseFloat(a[0].x), g += j * k, h = Math.abs(f - g), h /= 2, PolyCX = (b + d) / 2, PolyCY = (c + e) / 2, h } return PolyCX = 0, PolyCY = 0, 0 } var _wmsMode = 0, digimap4s = [], _menuX = null, _menuY = null, easymap = Easymap, digimap4 = Easymap, ezmap = Easymap, dg_DEFAULT_ICON = "imgs/icon01.png", dgCMenu = []; window.easymap = Easymap, window.Easymap = Easymap;